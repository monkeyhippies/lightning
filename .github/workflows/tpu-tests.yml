name: Test PyTorch - TPU

on:
  push:
    branches: [master, "release/*"]
  pull_request:  # TODO: set to target later
    branches: [master, "release/*"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref }}
  cancel-in-progress: ${{ ! (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/')) }}

defaults:
  run:
    shell: bash

jobs:
  test-on-tpus:
    runs-on: ubuntu-22.04
    # run only when merged to master or the PR title contains '[TPU]'
    if: ${{ github.event.pull_request.merged == true || contains(github.event.pull_request.title, '[TPU]') }}
    strategy:
      fail-fast: false
      matrix:
        pkg-name: ["fabric", "pytorch"]
    # 1 hour is the access token lifetime: https://cloud.google.com/docs/authentication/token-types#at-lifetime
    timeout-minutes: 60  # should match the timeout in the jsonnet files

    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Checkout ml-testing-accelerators
      run: |
       git clone https://github.com/GoogleCloudPlatform/ml-testing-accelerators.git
       cd ml-testing-accelerators
       git fetch origin 5e88ac24f631c27045e62f0e8d5dfcf34e425e25:stable
       git checkout stable

    - uses: actions/setup-go@v4
      with:
        go-version: '1.19'

    - name: Install jsonnet
      run: go install github.com/google/go-jsonnet/cmd/jsonnet@latest

    - name: Update jsonnet
      env:
        SCOPE: ${{ matrix.pkg-name }}
        XLA_VER: 2.0
        PR_NUMBER: ${{ github.event.pull_request.number }}
        SHA: ${{ github.event.pull_request.head.sha }}
      run: |
        import os
        fname = f'.github/workflows/tpu_workflow_{os.getenv("SCOPE")}.jsonnet'
        with open(fname) as fo:
            data = fo.read()
        data = data.replace('{PYTORCH_VERSION}', os.environ["XLA_VER"])
        data = data.replace('{PR_NUMBER}', os.environ["PR_NUMBER"] or "master")
        data = data.replace('{SHA}', os.environ["SHA"])
        print(data)
        with open(fname, "w") as fw:
            fw.write(data)
      shell: python

    - uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GKE_SA_KEY_BASE64 }}

    # https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-google-kubernetes-engine
    - uses: google-github-actions/get-gke-credentials@v1
      with:
        # see: https://console.cloud.google.com/kubernetes/list/overview?project=pt-lightning
        cluster_name: lighting-cluster
        # recommended zone for v3.8: https://cloud.google.com/tpu/docs/regions-zones
        location: us-central1-a

    - name: Deploy cluster
      id: deploy
      run: |
        set -ue
        export PATH=$PATH:$HOME/go/bin

        job_name=$(jsonnet -J ml-testing-accelerators/ .github/workflows/tpu_workflow_${{ matrix.pkg-name }}.jsonnet | kubectl create -o name -f -)
        job_name=${job_name#job.batch/}
        echo "Launched job name $job_name"
        echo "job_name=$job_name" >> $GITHUB_OUTPUT

        pod_name=$(kubectl get pods --selector job-name=$job_name -o name)
        pod_name=${pod_name#pod/}
        echo "Pod name: $pod_name"
        echo "pod_name=$pod_name" >> $GITHUB_OUTPUT

        echo "Waiting for the pod to be ready..."
        kubectl wait --for condition=ready --timeout=30m pod $pod_name

        kubectl logs -f $pod_name --container=train > /tmp/full_output.txt
        if grep -q '<?xml version="1.0" ?>' /tmp/full_output.txt; then
          # successful run. split the output into logs + coverage report
          csplit /tmp/full_output.txt '/<?xml version="1.0" ?>/';
          cat xx00  # test logs
          mv xx01 coverage.xml
        else
          # failed run, print everything
          cat /tmp/full_output.txt;
        fi

        failed=$(kubectl get job $job_name -o jsonpath={.status.failed})
        if [ -z "$failed" ] || [ $failed -eq 1 ]; then
          echo "Error: the job failed"
          kubectl get job $job_name -o jsonpath={.status}
          kubectl get pod $pod_name -o jsonpath={.status}
          exit 1
        fi

    - name: Cleanup
      if: always()
      run: |
        pod_name="${{ steps.deploy.outputs.pod_name }}"
        job_name="${{ steps.deploy.outputs.job_name }}"
        echo "Running cleanup: job $job_name, pod $pod_name"
        # get events for the current pod
        kubectl get event --field-selector involvedObject.name=$pod_name
        # delete the job, this will also delete the associated pod
        kubectl delete job $job_name
        # show all resources
        kubectl get pods
        kubectl get jobs

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      # see: https://github.com/actions/toolkit/issues/399
      continue-on-error: true
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: coverage.xml
        flags: tpu,pytest
        name: TPU-coverage
        fail_ci_if_error: false
